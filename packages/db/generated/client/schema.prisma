// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model users {
  user_id         Int            @id @default(autoincrement()) // Primary key
  user_name       String         @db.Char(50) // Name of the user
  user_email      String         @unique(map: "user_email") // Email (unique)
  user_password   String         @db.Text // Password
  user_role       String         @default("faculty") // Role of the user (hod, faculty, coordinator)
  dept_id         Int? // Foreign key to departments
  kpi             kpi[] // Relation to kpi created by the user
  departments     departments?   @relation("users_dept_idTodepartments", fields: [dept_id], references: [dept_id], onDelete: NoAction, onUpdate: NoAction)
  pillars         pillars[] // Relation to pillars created by the user
  approved_kpis   assigned_kpi[] // Relation to assigned KPIs approved by the user
  hod_departments departments[]  @relation("departments_hod_idTousers") // Relation to departments where the user is HOD

  @@index([dept_id], map: "fk_users_dept")
}

model departments {
  dept_id       Int       @id @default(autoincrement()) // Primary key
  dept_name     String    @unique(map: "dept_name") // Department name (unique)
  hod_id        Int? // Foreign key to users (HOD)
  dept_creation DateTime? @default(now()) @db.Timestamp(0) // Creation timestamp
  hod_name      String? // HOD name (for display purposes)
  pillars       pillars[] // Relation to pillars
  users         users?    @relation("departments_hod_idTousers", fields: [hod_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  users_in_dept users[]   @relation("users_dept_idTodepartments") // Relation to users in the department

  @@index([hod_id], map: "fk_departments_hod")
}

model pillars {
  pillar_id       Int            @id @default(autoincrement()) // Primary key
  pillar_name     String         @unique(map: "pillar_name") // Pillar name (unique)
  pillar_creation DateTime?      @default(now()) @db.Timestamp(0) // Creation timestamp
  created_by      Int // Foreign key to users
  department_id   Int // Foreign key to departments
  assigned_kpi    assigned_kpi[] // Relation to assigned_kpi
  users           users          @relation(fields: [created_by], references: [user_id], onDelete: Cascade)
  departments     departments    @relation(fields: [department_id], references: [dept_id], onDelete: Cascade)

  @@index([created_by], map: "fk_pillars_created_by")
  @@index([department_id], map: "fk_pillars_department")
}

model assigned_kpi {
  assigned_kpi_id Int       @id @default(autoincrement()) // Primary key
  kpi_id          Int // Foreign key to kpi
  pillar_id       Int // Foreign key to pillars
  kpi_name        String    @db.VarChar(255) // KPI name
  kpi_status      String    @db.VarChar(50) // Status of the KPI
  added_date      DateTime? @default(now()) @db.Timestamp(0) // Date when KPI was added
  resolved_date   DateTime? // Date when KPI was resolved
  approved_by     Int? // Foreign key to users (approver)
  comments        String?   @db.Text // Comments on the KPI
  kpi             kpi       @relation(fields: [kpi_id], references: [kpi_id], onDelete: Cascade)
  pillars         pillars   @relation(fields: [pillar_id], references: [pillar_id], onDelete: Cascade)
  approver        users?    @relation(fields: [approved_by], references: [user_id], onDelete: Cascade)

  @@index([kpi_id], map: "fk_assigned_kpi_kpi")
  @@index([pillar_id], map: "fk_assigned_kpi_pillar")
  @@index([approved_by], map: "fk_assigned_kpi_approver")
}

model kpi {
  kpi_id         Int            @id @default(autoincrement()) // Primary key
  kpi_name       String         @unique(map: "kpi_name") // KPI name (unique)
  kpi_created_at DateTime?      @default(now()) @db.Timestamp(0) // Creation timestamp
  kpi_updated_at DateTime?      @updatedAt // Automatically updates on record update
  form_data      Json // Example JSON field
  assigned_kpis  assigned_kpi[] // Relation to assigned_kpi
  user_id        Int? // Foreign key to users
  user           users?         @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([kpi_name], map: "idx_kpi_name")
}

model qoc {
  qoc_id       Int    @id @default(autoincrement()) // Primary key
  qoc_name     String @db.VarChar(255) // Name of the QOC
  qoc_email    String @unique // Email (unique)
  qoc_password String @db.Text // Password
  qoc_role     String @db.VarChar(50) // Role of the QOC
}
