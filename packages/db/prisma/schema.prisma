generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model users {
  user_id         Int             @id @default(autoincrement()) // Primary key
  user_name       String          @db.Char(50)                 // Name of the user
  user_email      String          @unique(map: "user_email")   // Email (unique)
  user_password   String          @db.Text                     // Password
  user_role       String          @default("faculty")          // Role of the user (hod, faculty, coordinator)
  dept_id         Int?                                         // Foreign key to departments
  kpi             kpi[]                                        // Relation to kpi created by the user
  departments     departments?    @relation("users_dept_idTodepartments", fields: [dept_id], references: [dept_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([dept_id], map: "fk_users_dept")
}

model departments {
  dept_id         Int             @id @default(autoincrement()) // Primary key
  dept_name       String          @unique(map: "dept_name")     // Department name (unique)
  hod_id          Int?                                         // Foreign key to users (HOD)
  dept_creation   DateTime?       @default(now()) @db.Timestamp(0) // Creation timestamp
  hod_name        String?                                      // HOD name (for display purposes)
  pillars         pillars[]                                    // Relation to pillars

  users           users?          @relation("departments_hod_idTousers", fields: [hod_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([hod_id], map: "fk_departments_hod")
}

model pillars {
  pillar_id       Int             @id @default(autoincrement()) // Primary key
  pillar_name     String          @unique(map: "pillar_name")   // Pillar name (unique)
  pillar_creation DateTime?       @default(now()) @db.Timestamp(0) // Creation timestamp
  created_by      Int                                         // Foreign key to users
  assigned_kpi    assigned_kpi[]                              // Relation to assigned_kpi

  users           users           @relation(fields: [created_by], references: [user_id], onDelete: Cascade)

  @@index([created_by], map: "fk_pillars_created_by")
}

model assigned_kpi {
  assigned_kpi_id Int             @id @default(autoincrement()) // Primary key
  kpi_id          Int                                         // Foreign key to kpi
  kpi_name        String          @db.VarChar(255)             // KPI name
  kpi_status      String          @db.VarChar(50)              // Status of the KPI
  added_date      DateTime?       @default(now()) @db.Timestamp(0) // Date when KPI was added
  resolved_date   DateTime?                                    // Date when KPI was resolved
  approved_by     Int?                                         // Foreign key to users (approver)
  comments        String?          @db.Text                    // Comments on the KPI

  kpi             kpi             @relation(fields: [kpi_id], references: [kpi_id], onDelete: Cascade)
  approver        users?          @relation(fields: [approved_by], references: [user_id], onDelete: Cascade)

  @@index([kpi_id], map: "fk_assigned_kpi_kpi")
  @@index([approved_by], map: "fk_assigned_kpi_approver")
}

model kpi {
  kpi_id          Int             @id @default(autoincrement()) // Primary key
  kpi_name        String          @unique(map: "kpi_name")      // KPI name (unique)
  kpi_created_at  DateTime?       @default(now()) @db.Timestamp(0) // Creation timestamp
  example         Json                                         // Example JSON field
  assigned_kpis   assigned_kpi[]                               // Relation to assigned_kpi

  @@index([kpi_name], map: "idx_kpi_name")
}

model qoc {
  qoc_id       Int    @id @default(autoincrement()) // Primary key
  qoc_name     String @db.VarChar(255)             // Name of the QOC
  qoc_email    String @unique                      // Email (unique)
  qoc_password String @db.Text                     // Password
  qoc_role     String @db.VarChar(50)              // Role of the QOC
}